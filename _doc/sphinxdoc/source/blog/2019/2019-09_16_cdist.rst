
.. blogpost::
    :title: Operator CDist
    :keywords: onnxruntime, cdist
    :date: 2019-09-16
    :categories: onnx

    Notebooks :ref:`onnxpdistrst` shows how much slower
    an :epkg:`ONNX` implementation of function
    :epkg:`cdist`, from 3 to 10 times slower.
    One way to optimize the converted model is to
    create dedicated operato such as one for function
    :epkg:`cdist`. The first example shows how to
    convert a :epkg:`GaussianProcessRegressor` into
    standard :epkg:`ONNX`.

    .. gdot::
        :script: DOT-SECTION

        import numpy
        from sklearn.datasets import load_iris
        from sklearn.model_selection import train_test_split
        from sklearn.gaussian_process import GaussianProcessRegressor
        from sklearn.gaussian_process.kernels import ExpSineSquared
        from mlprodict.onnx_conv import to_onnx
        from mlprodict.onnxrt import OnnxInference

        iris = load_iris()
        X, y = iris.data, iris.target
        X_train, _, y_train, __ = train_test_split(X, y, random_state=11)
        clr = GaussianProcessRegressor(ExpSineSquared(), alpha=20.)
        clr.fit(X_train, y_train)

        model_def = to_onnx(clr, X_train, dtype=numpy.float64)
        oinf = OnnxInference(model_def)
        print("DOT-SECTION", oinf.to_dot())

    Now the new model with the operator `CDist`.

    .. gdot::
        :script: DOT-SECTION

        import numpy
        from sklearn.datasets import load_iris
        from sklearn.model_selection import train_test_split
        from sklearn.gaussian_process import GaussianProcessRegressor
        from sklearn.gaussian_process.kernels import ExpSineSquared
        from mlprodict.onnx_conv import to_onnx
        from mlprodict.onnxrt import OnnxInference

        iris = load_iris()
        X, y = iris.data, iris.target
        X_train, _, y_train, __ = train_test_split(X, y, random_state=11)
        clr = GaussianProcessRegressor(ExpSineSquared(), alpha=20.)
        clr.fit(X_train, y_train)

        model_def = to_onnx(clr, X_train, dtype=numpy.float64,
                            options={GaussianProcessRegressor: {'optim': 'cdist'}})
        oinf = OnnxInference(model_def)
        print("DOT-SECTION", oinf.to_dot())

    Section :ref:`lpy-GaussianProcess` shows how much the gain
    is depending on the number of observations for four features.
